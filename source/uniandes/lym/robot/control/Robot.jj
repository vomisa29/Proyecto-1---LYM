/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi


 **/


options 
{
  
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
 
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.HashMap;

@SuppressWarnings("serial")
public class Robot 
{


	private RobotWorldDec world;
	private HashMap<String,Integer> variables = new HashMap<String,Integer>();
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();
}
PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
	| "\n"
}

TOKEN: /* Nombres de Comandos */
{

			<MOV:  "Mov">
			
		| <RIGHT: "RIGHT">
		| <LEFT: "LEFT">
		| <AROUND: "AROUND">
		| <FRONT: "FRONT">
		| <BACK: "BACK">

        | <NORTH: "NORTH">
        | <SOUTH: "SOUTH">
        | <EAST: "EAST">
        | <WEST: "WEST"> 
		
		| <POP: "Pop" >
		| <GO: "GO" >
        | <HOP:  "HOP" >
        | <AssignTo: "assignTo">
		| <GoTO: "goto">
		| <TURN: "turn">
		| <FACE: "face">
		| <PUT: "Put">
		| <PICK: "Pick">
		| <MoveToThe: "moveToThe">
		| <MoveInDir: "moveInDir">
		| <JumpToThe: "jumpToThe">
		| <JumpInDir: "jumpInDir">
		| <NOP: "nop">
        		

}

TOKEN: /* Nombres de Control */
{
			<WHILE:  "while">
	    | <DO: "do">
	    | <IF: "if">
	    | <THEN: "then">
	    | <ELSE: "else">
	    | <REPEAT: "repeat">
}

TOKEN: /* Nombres de Condicion */
{
			<FACING: "facing" >
        | <canPut: "canPut">
        | <canPick: "canPick">
        | <canMoveInDir: "canMoveInDir">
        | <canJumpInDir: "canJumpInDir">
        | <canMoveToThe: "canMoveToThe">
        | <canJumpToThe: "canJumpToThe">
        | <NOT: "not">
}

TOKEN:
{
		<BALLOONS:  "BALLOONS" >
		| <CHIPS:     "CHIPS"  >
		| <ROBOT: "ROBOT_R" >
		| <VARS: "VARS">
		| <PROCS: "PROCS" >
		

}



TOKEN :
{
		<NUM: (<DIGIT>)+ >
		|  	<#DIGIT: ["0"-"9"] >
		| <NAME: (<LETTER>)+>
		| <#LETTER: ["a"-"z"]|["A"-"Z"] >
        
}



	//boolean command(uniandes.lym.robot.view.Console sistema) :
	boolean command(Console sistema):
	{	
		
		int x,y;
		String salida=new String();
		String entrada= new String();
		Boolean face = true;

	}

	
	{
		(		  (
		   <RIGHT>  {world.turnRight();salida = "Command: Turnright";}
		|  <LEFT>  <RIGHT><RIGHT><RIGHT>{salida = "Command: Turnleft";}
        |  <AROUND>  <RIGHT><RIGHT>{salida = "Command: Turnaround";}
        |  <FRONT>  {salida = "Command: Front";}


        |  <AssignTo>  x=varORnum() "," <NAME>{ entrada= token.image;
		  variables.put(entrada,x);} {salida = "Command: AssignTo";}
	    | <TURN>  (<RIGHT>
		| <LEFT>
		| <AROUND>)
		{entrada= token.image; if (entrada.equals("left")) {
	                                world.turnRight();
	                                world.turnRight();
	                                world.turnRight();
	                                }else if ( entrada.equals("right" ))
	                                {  world.turnRight(); }
	                                else if (entrada.equals("around")) {
	                                  world.turnRight();
	                                  world.turnRight(); } salida = "Command: Turn";}
	    | <FACE>  (<NORTH>
        | <SOUTH>
        | <EAST>
        | <WEST>)  {entrada= token.image; x=-1;
	    if (entrada.equals("north")) {
	      x = 0;
	      }else if (entrada.equals("south")){
            x = 1;
	      }else if (entrada.equals("east")) {
            x = 2;
	      }else if (entrada.equals("west")) {
            x = 3;
	      }
	    
	    while(face) {
        if (world.getFacing() != x) {
        world.turnRight();
        }else {
        face = false;
        } }
      }
        |  <MoveToThe>  x=varORnum()"," (<RIGHT>
		| <LEFT>
		| <AROUND>)
		{ entrada= token.image;
        if (entrada.equals("left")) {
	    world.turnRight();
	    world.turnRight();
	    world.turnRight();
	    world.moveForward(x,false);
	    world.turnRight();
	    
	    }else if ( entrada.equals("right" ))
	    {  world.turnRight();
	    world.moveForward(x,false);
	    world.turnRight();
	    world.turnRight();
	    world.turnRight(); }
	    else if (entrada.equals("around")) {
	    world.turnRight();
	    world.turnRight();
	    world.moveForward(x,false);
	    world.turnRight();
	    world.turnRight();
	     }
	    salida = "Command: MoveToThe";}
	    
		|  <MoveInDir>  y=varORnum()","
		(<NORTH>
        | <SOUTH>
        | <EAST>
        | <WEST>)
        {entrada= token.image; x=0;
	    if (entrada.equals("north")) {
	      x = 0;
	      }else if (entrada.equals("south")){
            x = 1;
	      }else if (entrada.equals("east")) {
            x = 2;
	      }else{
            x = 3;
	      }
	    
	    while(face) {
        if (world.getFacing() != x) {
        world.turnRight();
        }else {
        face = false; world.moveForward(y, false);
        }salida = "Command: JumpInDir"; }   }
        
        |  <JumpToThe> x=varORnum()"," <NAME>{ entrada= token.image;
        if (entrada.equals("left")) {
	    world.turnRight();
	    world.turnRight();
	    world.turnRight();
	    world.moveForward(x,true);
	    world.turnRight();
	    
	    }else if ( entrada.equals("right" ))
	    {  world.turnRight();
	    world.moveForward(x,true);
	    world.turnRight();
	    world.turnRight();
	    world.turnRight(); }
	    else if (entrada.equals("around")) {
	    world.turnRight();
	    world.turnRight();
	    world.moveForward(x,true);
	    world.turnRight();
	    world.turnRight();
	     }
	    salida = "Command: JumpToThe";}

	    |  <JumpInDir>  y=varORnum()"," (<NORTH>
        | <SOUTH>
        | <EAST>
        | <WEST>)
        {entrada= token.image; x=-1;
	    if (entrada.equals("north")) {
	      x = 0;
	      }else if (entrada.equals("south")){
            x = 1;
	      }else if (entrada.equals("east")) {
            x = 2;
	      }else if (entrada.equals("west")) {
            x = 3;
	      }
	    
	    while(face) {
        if (world.getFacing() != x) {
        world.turnRight();
        }else {
        face = false; world.moveForward(y, true);
        }salida = "Command: JumpInDir"; } }

        | <NOP> {salida = "Command: JumpInDir"; }
	    
		| 	<MOV>   x=varORnum()  {world.moveForward(x,false);salida = "Command: Moveforward ";}  
		| 	<HOP>   x=varORnum()  {world.moveForward(x,true);salida = "Command:Jumpforward ";}
		| 	<GO>   x=varORnum() "," y=num() {world.setPostion(x,y);salida = "Command:GO ";}  
		|  <PUT>  put() 			  			
		|  <PICK>  get()  	
	    |  < POP >  x=varORnum()  {world.popBalloons(x); salida = "Comando:  Pop";}
		) ";" 

		{
		    try {
	    			 Thread.sleep(900);
	    	    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    		    }
	    			 
			sistema.printOutput(salida);
			return true;
		})+

    	| <EOF> {return false;} 
	}


	void put() :
	{
		int f=1;	
	}
	{
		( <CHIPS>    "," f=varORnum() {world.putChips(f); salida = "Command:  Put Chips"; })
		|  	  ( <BALLOONS>   "," f=varORnum() {world.putBalloons(f); salida = "Command:  Put Balloons";})	 

	}

	void get() :
	{
		int f=1;	
	}
	{
		( <CHIPS>   "," f=varORnum() {world.pickChips(f);salida = "Command:  Pick chips";})
		|  	  ( <BALLOONS>   "," f=varORnum() {world.grabBalloons(f);salida="Command:  Pick balloons";})	 

	}

	
	

	/**
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */
    int varORnum() throws Error:
    {
		int total;
		String variable;
	}
	{
		(<NAME>
		{
		  variable= token.image;
		  if (variables.get(variable) != null)
		  {
           total = variables.get(variable);
		   }else
		  {
           throw new Error ("La variable no existe.");
		   }
		  return total;
		}
        | <NUM>{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				throw new Error("Number out of bounds: "+token.image+" !!");
			}
			return total;
		}		)
	}

	int num() throws Error:
	{	
		int total=1;
	}
	{
		<NUM>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				throw new Error("Number out of bounds: "+token.image+" !!");
			}
			return total;
		}
	}



// HEART OF THE PROYECT

void program():
{

}
{
  <ROBOT> variables() listaProcs() "[" (instruct())+"]"
}

void variables():
{
    String variable;
}
{
  <VARS> (<NAME>
		{
		  variable= token.image;
		  variables.put(variable,null);
		}
		(",")?)+
}

void listaProcs():
{

}
{
  <PROCS> (procedure())+
}

void procedure():
{

}
{
 <NAME>
 {
   // uhh codigo para recordar procedimientos
 }
 "[" parametros() instrucciones()"]"
}

void parametros():
{

}
{
 "|" (<NAME>
     {
      // uhh codigo para recordar variables locales
     }
     (",")?
     )* "|"
}

void instrucciones():
{

}
{
 (instruct()(",")?)+
}

void instruct():
{
// command | control  | procedureDefined
}
{
 command(null)
}

void bloque():
{

}
{
 "[" instrucciones() "]"
}