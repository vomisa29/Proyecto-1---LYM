/* Generated By:JavaCC: Do not edit this line. Robot.java */
package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;

import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.HashMap;

@SuppressWarnings("serial")
public class Robot implements RobotConstants {


        private RobotWorldDec world;
        private HashMap<String,Integer> variables = new HashMap<String,Integer>();


        void setWorld(RobotWorld w) {
                world = (RobotWorldDec) w;
        }

        String salida=new String();

        //boolean command(uniandes.lym.robot.view.Console sistema) :
  final public boolean command(Console sistema) throws ParseException {
                int x,y;
                String salida=new String();
                String entrada= new String();
                Boolean face = true;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MOV:
    case RIGHT:
    case LEFT:
    case AROUND:
    case FRONT:
    case POP:
    case GO:
    case HOP:
    case AssignTo:
    case TURN:
    case FACE:
    case PUT:
    case PICK:
    case MoveToThe:
    case MoveInDir:
    case JumpToThe:
    case JumpInDir:
    case NOP:
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RIGHT:
          jj_consume_token(RIGHT);
                             world.turnRight();salida = "Command: Turnright";
          break;
        case LEFT:
          jj_consume_token(LEFT);
          jj_consume_token(RIGHT);
          jj_consume_token(RIGHT);
          jj_consume_token(RIGHT);
                                                 salida = "Command: Turnleft";
          break;
        case AROUND:
          jj_consume_token(AROUND);
          jj_consume_token(RIGHT);
          jj_consume_token(RIGHT);
                                    salida = "Command: Turnaround";
          break;
        case FRONT:
          jj_consume_token(FRONT);
                     salida = "Command: Front";
          break;
        case AssignTo:
          jj_consume_token(AssignTo);
          x = varORnum();
          jj_consume_token(52);
          jj_consume_token(NAME);
                                                entrada= token.image;
                  variables.put(entrada,x);
                                              salida = "Command: AssignTo";
          break;
        case TURN:
          jj_consume_token(TURN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case RIGHT:
            jj_consume_token(RIGHT);
            break;
          case LEFT:
            jj_consume_token(LEFT);
            break;
          case AROUND:
            jj_consume_token(AROUND);
            break;
          default:
            jj_la1[0] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                 entrada= token.image; if (entrada.equals("left")) {
                                        world.turnRight();
                                        world.turnRight();
                                        world.turnRight();
                                        }else if ( entrada.equals("right" ))
                                        {  world.turnRight(); }
                                        else if (entrada.equals("around")) {
                                          world.turnRight();
                                          world.turnRight(); } salida = "Command: Turn";
          break;
        case FACE:
          jj_consume_token(FACE);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NORTH:
            jj_consume_token(NORTH);
            break;
          case SOUTH:
            jj_consume_token(SOUTH);
            break;
          case EAST:
            jj_consume_token(EAST);
            break;
          case WEST:
            jj_consume_token(WEST);
            break;
          default:
            jj_la1[1] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                    entrada= token.image; x=-1;
            if (entrada.equals("north")) {
              x = 0;
              }else if (entrada.equals("south")){
            x = 1;
              }else if (entrada.equals("east")) {
            x = 2;
              }else if (entrada.equals("west")) {
            x = 3;
              }

            while(face) {
        if (world.getFacing() != x) {
        world.turnRight();
        }else {
        face = false;
        } }
          break;
        case MoveToThe:
          jj_consume_token(MoveToThe);
          x = varORnum();
          jj_consume_token(52);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case RIGHT:
            jj_consume_token(RIGHT);
            break;
          case LEFT:
            jj_consume_token(LEFT);
            break;
          case AROUND:
            jj_consume_token(AROUND);
            break;
          default:
            jj_la1[2] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                  entrada= token.image;
        if (entrada.equals("left")) {
            world.turnRight();
            world.turnRight();
            world.turnRight();
            world.moveForward(x,false);
            world.turnRight();

            }else if ( entrada.equals("right" ))
            {  world.turnRight();
            world.moveForward(x,false);
            world.turnRight();
            world.turnRight();
            world.turnRight(); }
            else if (entrada.equals("around")) {
            world.turnRight();
            world.turnRight();
            world.moveForward(x,false);
            world.turnRight();
            world.turnRight();
             }
            salida = "Command: MoveToThe";
          break;
        case MoveInDir:
          jj_consume_token(MoveInDir);
          y = varORnum();
          jj_consume_token(52);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NORTH:
            jj_consume_token(NORTH);
            break;
          case SOUTH:
            jj_consume_token(SOUTH);
            break;
          case EAST:
            jj_consume_token(EAST);
            break;
          case WEST:
            jj_consume_token(WEST);
            break;
          default:
            jj_la1[3] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
         entrada= token.image; x=0;
            if (entrada.equals("north")) {
              x = 0;
              }else if (entrada.equals("south")){
            x = 1;
              }else if (entrada.equals("east")) {
            x = 2;
              }else{
            x = 3;
              }

            while(face) {
        if (world.getFacing() != x) {
        world.turnRight();
        }else {
        face = false; world.moveForward(y, false);
        }salida = "Command: JumpInDir"; }
          break;
        case JumpToThe:
          jj_consume_token(JumpToThe);
          x = varORnum();
          jj_consume_token(52);
          jj_consume_token(NAME);
                                               entrada= token.image;
        if (entrada.equals("left")) {
            world.turnRight();
            world.turnRight();
            world.turnRight();
            world.moveForward(x,true);
            world.turnRight();

            }else if ( entrada.equals("right" ))
            {  world.turnRight();
            world.moveForward(x,true);
            world.turnRight();
            world.turnRight();
            world.turnRight(); }
            else if (entrada.equals("around")) {
            world.turnRight();
            world.turnRight();
            world.moveForward(x,true);
            world.turnRight();
            world.turnRight();
             }
            salida = "Command: JumpToThe";
          break;
        case JumpInDir:
          jj_consume_token(JumpInDir);
          y = varORnum();
          jj_consume_token(52);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NORTH:
            jj_consume_token(NORTH);
            break;
          case SOUTH:
            jj_consume_token(SOUTH);
            break;
          case EAST:
            jj_consume_token(EAST);
            break;
          case WEST:
            jj_consume_token(WEST);
            break;
          default:
            jj_la1[4] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
         entrada= token.image; x=-1;
            if (entrada.equals("north")) {
              x = 0;
              }else if (entrada.equals("south")){
            x = 1;
              }else if (entrada.equals("east")) {
            x = 2;
              }else if (entrada.equals("west")) {
            x = 3;
              }

            while(face) {
        if (world.getFacing() != x) {
        world.turnRight();
        }else {
        face = false; world.moveForward(y, true);
        }salida = "Command: JumpInDir"; }
          break;
        case NOP:
          jj_consume_token(NOP);
                 salida = "Command: JumpInDir";
          break;
        case MOV:
          jj_consume_token(MOV);
          x = varORnum();
                                               world.moveForward(x,false);salida = "Command: Moveforward ";
          break;
        case HOP:
          jj_consume_token(HOP);
          x = varORnum();
                                               world.moveForward(x,true);salida = "Command:Jumpforward ";
          break;
        case GO:
          jj_consume_token(GO);
          x = varORnum();
          jj_consume_token(52);
          y = num();
                                                         world.setPostion(x,y);salida = "Command:GO ";
          break;
        case PUT:
          jj_consume_token(PUT);
          put();
          break;
        case PICK:
          jj_consume_token(PICK);
          get();
          break;
        case POP:
          jj_consume_token(POP);
          x = varORnum();
                                       world.popBalloons(x); salida = "Comando:  Pop";
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(53);
                    try {
                                 Thread.sleep(900);
                    } catch (InterruptedException e) {
                                        System.err.format("IOException: %s%n", e);
                            }

                        sistema.printOutput(salida);
                        {if (true) return true;}
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MOV:
        case RIGHT:
        case LEFT:
        case AROUND:
        case FRONT:
        case POP:
        case GO:
        case HOP:
        case AssignTo:
        case TURN:
        case FACE:
        case PUT:
        case PICK:
        case MoveToThe:
        case MoveInDir:
        case JumpToThe:
        case JumpInDir:
        case NOP:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_1;
        }
      }
      break;
    case 0:
      jj_consume_token(0);
                 {if (true) return false;}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void put() throws ParseException {
                int f=1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHIPS:
      jj_consume_token(CHIPS);
      jj_consume_token(52);
      f = varORnum();
                                               world.putChips(f); salida = "Command:  Put Chips";
      break;
    case BALLOONS:
      jj_consume_token(BALLOONS);
      jj_consume_token(52);
      f = varORnum();
                                                           world.putBalloons(f); salida = "Command:  Put Balloons";
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void get() throws ParseException {
                int f=1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHIPS:
      jj_consume_token(CHIPS);
      jj_consume_token(52);
      f = varORnum();
                                              world.pickChips(f);salida = "Command:  Pick chips";
      break;
    case BALLOONS:
      jj_consume_token(BALLOONS);
      jj_consume_token(52);
      f = varORnum();
                                                           world.grabBalloons(f);salida="Command:  Pick balloons";
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

        /**
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */
  final public int varORnum() throws ParseException, Error {
                int total;
                String variable;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAME:
      jj_consume_token(NAME);
                  variable= token.image;
                  if (variables.get(variable) != null)
                  {
           total = variables.get(variable);
                   }else
                  {
           {if (true) throw new Error ("La variable no existe.");}
                   }
                  {if (true) return total;}
      break;
    case NUM:
      jj_consume_token(NUM);
                        try
                        {
                                total = Integer.parseInt(token.image);
                        }
                        catch (NumberFormatException ee)
                        {
                                {if (true) throw new Error("Number out of bounds: "+token.image+" !!");}
                        }
                        {if (true) return total;}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public int num() throws ParseException, Error {
                int total=1;
    jj_consume_token(NUM);
                        try
                        {
                                total = Integer.parseInt(token.image);
                        }
                        catch (NumberFormatException ee)
                        {
                                {if (true) throw new Error("Number out of bounds: "+token.image+" !!");}
                        }
                        {if (true) return total;}
    throw new Error("Missing return statement in function");
  }

// HEART OF THE PROYECT
  final public void program() throws ParseException {
    jj_consume_token(ROBOT);
    variables();
    listaProcs();
    jj_consume_token(54);
    label_2:
    while (true) {
      instruct();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 0:
      case MOV:
      case RIGHT:
      case LEFT:
      case AROUND:
      case FRONT:
      case POP:
      case GO:
      case HOP:
      case AssignTo:
      case TURN:
      case FACE:
      case PUT:
      case PICK:
      case MoveToThe:
      case MoveInDir:
      case JumpToThe:
      case JumpInDir:
      case NOP:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_2;
      }
    }
    jj_consume_token(55);
  }

  final public void variables() throws ParseException {
    String variable;
    jj_consume_token(VARS);
    label_3:
    while (true) {
      jj_consume_token(NAME);
                  variable= token.image;
                  variables.put(variable,null);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 52:
        jj_consume_token(52);
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_3;
      }
    }
  }

  final public void listaProcs() throws ParseException {
    jj_consume_token(PROCS);
    label_4:
    while (true) {
      procedure();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_4;
      }
    }
  }

  final public void procedure() throws ParseException {
    jj_consume_token(NAME);

    jj_consume_token(54);
    parametros();
    instrucciones();
    jj_consume_token(55);
  }

  final public void parametros() throws ParseException {
    jj_consume_token(56);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_5;
      }
      jj_consume_token(NAME);

      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 52:
        jj_consume_token(52);
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
    }
    jj_consume_token(56);
  }

  final public void instrucciones() throws ParseException {
    label_6:
    while (true) {
      instruct();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 52:
        jj_consume_token(52);
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 0:
      case MOV:
      case RIGHT:
      case LEFT:
      case AROUND:
      case FRONT:
      case POP:
      case GO:
      case HOP:
      case AssignTo:
      case TURN:
      case FACE:
      case PUT:
      case PICK:
      case MoveToThe:
      case MoveInDir:
      case JumpToThe:
      case JumpInDir:
      case NOP:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_6;
      }
    }
  }

  final public void instruct() throws ParseException {
    command(null);
  }

  final public void bloque() throws ParseException {
    jj_consume_token(54);
    instrucciones();
    jj_consume_token(55);
  }

  /** Generated Token Manager. */
  public RobotTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1c0,0x7800,0x1c0,0x7800,0x7800,0x1ff783e0,0x1ff783e0,0x1ff783e1,0x0,0x0,0x0,0x1ff783e1,0x0,0x0,0x0,0x0,0x0,0x0,0x1ff783e1,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1800,0x1800,0x50000,0x0,0x100000,0x40000,0x40000,0x40000,0x100000,0x100000,0x0,};
   }

  /** Constructor with InputStream. */
  public Robot(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Robot(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RobotTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Robot(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RobotTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Robot(RobotTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RobotTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[57];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 19; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 57; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
